# Este workflow tiene como objetivo compilar el código, ejecutar las pruebas y 
# generar los reportes en formato HTML y PDF 

name: Java CI with Gradle

# name: define el nombre del workflow. En este caso, es "Java CI with Gradle".
# CI significa "Integración Continua" (Continuous Integration). Se refiere a un proceso automático 
# para construir y probar el código de manera continua a medida que se realizan cambios.

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Lo anterior indica cuándo se dispara el workflow. En este caso, al hacer push o pull-request 
# en la rama principal (main)

# De aquí en adelante se especifican los jobs. 
# runs-on indica que se ejecutará en un equipo con el sistema operativo Ubuntu
# Los steps indican cada uno de los pasos del workflow
# uses es una acción que descarga el código fuente del repositorio 
# Luego se  configuran el JDK (Java Development Kit) y gradle
# Se compila el código con gradle y se ejcutan las pruebas (unitarias y de aceptación [Cucumber])
# Se instala wkhtmltopdf para luego convertir a PDF los reportes de las pruebas
# El workflow termina con el archivado de los reportes (para poder consultarlos después)


jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Set up Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        gradle-version: '8.5' # Asegúrate de usar la versión adecuada
    
    - name: Build with Gradle Wrapper
      run: |
        cd MeMo1-Ejercicio1
        chmod 777 ./gradlew
        chmod +x ./gradlew
        ./gradlew dependencies
        ./gradlew build

    - name: Run Unit Tests and Generate Reports
      run: |
        cd MeMo1-Ejercicio1
        ./gradlew test

    - name: Run Cucumber Tests
      run: |
        cd MeMo1-Ejercicio1
        ./gradlew cucumberTest

    # Instalar wkhtmltopdf para convertir los reportes HTML a PDF
    - name: Install wkhtmltopdf
      run: sudo apt-get install -y wkhtmltopdf

    # Convertir los reportes HTML de las pruebas unitarias a PDF
    #- name: Convert Unit Test Report to PDF
    #  run: |
    #    wkhtmltopdf MeMo1-Ejercicio1/app/build/reports/tests/test/index.html unit-test-report.pdf

    # Convertir los reportes HTML de las pruebas Cucumber a PDF
    #- name: Convert Cucumber Test Report to PDF
    #  run: |
    #    wkhtmltopdf MeMo1-Ejercicio1/app/build/reports/cucumber/cucumber-html-report.html cucumber-report.pdf

    # Subir los reportes como artefactos para descargarlos luego
    #- name: Archive Cucumber test results
    #  uses: actions/upload-artifact@v3
    #  with:
    #    name: cucumber-reports
    #    path: |
    #      cucumber-report.pdf
    #      unit-test-report.pdf

    - name: Convert HTML to PDF
      run: wkhtmltopdf /home/runner/work/Ejercicio1/Ejercicio1/MeMo1-Ejercicio1/app/build/reports/tests/test/index.html /home/runner/work/Ejercicio1/Ejercicio1/MeMo1-Ejercicio1/app/build/reports/tests/unit-test-report.pdf

    - name: Upload PDF as artifact
      uses: actions/upload-artifact@v3
      with:
          name: unit-test-report
          path: /home/runner/work/Ejercicio1/Ejercicio1/MeMo1-Ejercicio1/app/build/reports/tests/unit-test-report.pdf
